/*
 * MIT License
 * 
 * Copyright (c) 2020 Sly Technologies Inc.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package org.easylibs.streamer.sql;

import java.util.function.Consumer;

/**
 * The Interface SqlInsert.
 * 
 * @author Sly Technologies Inc
 * @author repos@slytechs.com
 */
public interface SqlInsert {

	/**
	 * The Interface Builder.
	 */
	public interface Builder {

		/**
		 * Builds the.
		 *
		 * @return the sql insert
		 */
		SqlInsert build();

		/**
		 * Execute.
		 *
		 * @return the int
		 */
		int execute();

		/**
		 * Prepare.
		 *
		 * @param autoGeneratedKeys the auto generated keys
		 * @return the prepared sql update
		 */
		PreparedSqlUpdate prepare(boolean autoGeneratedKeys);

		/**
		 * Columns.
		 *
		 * @param column  the column
		 * @param columns the columns
		 * @return the builder
		 */
		Builder columns(String column, String... columns);

		/**
		 * Values.
		 *
		 * @param value  the value
		 * @param values the values
		 * @return the builder
		 */
		Builder values(Object value, Object... values);

		/**
		 * Repeats the values specified {@code count} times. The method calls the
		 * {@link #values(Object, Object...)} method {@code count} times with the
		 * supplied values. This is useful for prepared statements, where the set of of
		 * '?' values needs to be repeated a specific number of times.
		 *
		 * @param count  the number of times to call {@link #values(Object, Object...)}
		 *               method with the supplied values
		 * @param value  the value
		 * @param values the values
		 * @return the sql insert builder
		 */
		default Builder repeat(int count, Object value, Object... values) {
			for (int i = 0; i < count; i++) {
				values(value, values);
			}

			return this;
		}

		/**
		 * Peek sql.
		 *
		 * @param action the action
		 * @return the builder
		 */
		Builder peekSql(Consumer<String> action);

	}

	/**
	 * Prepare.
	 *
	 * @param autoGeneratedKeys the auto generated keys
	 * @return the prepared sql update
	 */
	PreparedSqlUpdate prepare(boolean autoGeneratedKeys);

	/**
	 * Execute.
	 *
	 * @return the int
	 */
	int execute();

}
